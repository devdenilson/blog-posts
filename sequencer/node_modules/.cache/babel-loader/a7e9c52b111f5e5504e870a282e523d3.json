{"ast":null,"code":"import _classCallCheck from \"/Users/patrickferris/Documents/Projects/sequencer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/patrickferris/Documents/Projects/sequencer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/patrickferris/Documents/Projects/sequencer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/patrickferris/Documents/Projects/sequencer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/patrickferris/Documents/Projects/sequencer/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/patrickferris/Documents/Projects/sequencer/src/Instrument.js\";\nimport React, { Component } from 'react';\n\nvar Instrument =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Instrument, _Component);\n\n  function Instrument() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Instrument);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Instrument)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      sequence: new Array(8).fill(false)\n    };\n\n    _this.updateSequence = function (idx) {\n      console.log(_this.state.sequence);\n\n      var seq = _this.state.sequence.map(function (val, jdx) {\n        if (idx === jdx) {\n          return !_this.state.sequence[idx];\n        } else {\n          return _this.state.sequence[jdx];\n        }\n      });\n\n      _this.setState({\n        sequence: seq\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Instrument, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var sequence = this.state.sequence;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, sequence.map(function (value, idx) {\n        return React.createElement(\"div\", {\n          className: \"sequence-button\",\n          key: idx,\n          onClick: _this2.updateSequence.bind(_this2, idx),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, \" \", idx, \" \");\n      }));\n    }\n  }]);\n\n  return Instrument;\n}(Component);\n\nexport default Instrument;","map":{"version":3,"sources":["/Users/patrickferris/Documents/Projects/sequencer/src/Instrument.js"],"names":["React","Component","Instrument","state","sequence","Array","fill","updateSequence","idx","console","log","seq","map","val","jdx","setState","value","bind"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,U;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,IAAIC,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,KAAlB;AADJ,K;;UAIRC,c,GAAiB,UAACC,GAAD,EAAS;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKP,KAAL,CAAWC,QAAvB;;AAEA,UAAIO,GAAG,GAAG,MAAKR,KAAL,CAAWC,QAAX,CAAoBQ,GAApB,CAAwB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC9C,YAAGN,GAAG,KAAKM,GAAX,EAAgB;AACd,iBAAO,CAAC,MAAKX,KAAL,CAAWC,QAAX,CAAoBI,GAApB,CAAR;AACD,SAFD,MAEO;AACL,iBAAO,MAAKL,KAAL,CAAWC,QAAX,CAAoBU,GAApB,CAAP;AACD;AACF,OANS,CAAV;;AAQA,YAAKC,QAAL,CAAc;AACZX,QAAAA,QAAQ,EAAGO;AADC,OAAd;AAGD,K;;;;;;;6BAEQ;AAAA;;AAAA,UACDP,QADC,GACY,KAAKD,KADjB,CACDC,QADC;AAGP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,QAAQ,CAACQ,GAAT,CAAa,UAACI,KAAD,EAAQR,GAAR,EAAgB;AAC5B,eACE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAiC,UAAA,GAAG,EAAEA,GAAtC;AAA2C,UAAA,OAAO,EAAE,MAAI,CAACD,cAAL,CAAoBU,IAApB,CAAyB,MAAzB,EAA+BT,GAA/B,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA2FA,GAA3F,MADF;AAGD,OAJA,CADH,CADF;AASD;;;;EAlCsBP,S;;AAqCzB,eAAeC,UAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Instrument extends Component {\n\n  state = {\n    sequence: new Array(8).fill(false)\n  }\n\n  updateSequence = (idx) => {\n    console.log(this.state.sequence);\n\n    let seq = this.state.sequence.map((val, jdx) => {\n      if(idx === jdx) {\n        return !this.state.sequence[idx];\n      } else {\n        return this.state.sequence[jdx];\n      }\n    });\n\n    this.setState({\n      sequence:  seq\n    });\n  }\n\n  render() {\n    let { sequence } = this.state;\n\n    return(\n      <div>\n        {sequence.map((value, idx) => {\n          return(\n            <div className=\"sequence-button\" key={idx} onClick={this.updateSequence.bind(this, idx)}> {idx} </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Instrument;\n"]},"metadata":{},"sourceType":"module"}